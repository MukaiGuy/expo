{"version":3,"file":"useLastNotificationResponse.js","sourceRoot":"","sources":["../src/useLastNotificationResponse.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,eAAe,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAG7D,OAAO,EACL,WAAW,IAAI,yBAAyB,EACxC,2BAA2B,GAC5B,MAAM,yCAAyC,CAAC;AACjD,OAAO,8BAA8B,MAAM,kCAAkC,CAAC;AAE9E;;;;;;;;GAQG;AACH,MAAM,CAAC,OAAO,UAAU,2BAA2B;IACjD,+DAA+D;IAC/D,2DAA2D;IAC3D,0EAA0E;IAC1E,oEAAoE;IACpE,yEAAyE;IACzE,qEAAqE;IACrE,oBAAoB;IACpB,4CAA4C;IAC5C,EAAE;IACF,0DAA0D;IAC1D,+CAA+C;IAC/C,sDAAsD;IACtD,mEAAmE;IACnE,oDAAoD;IACpD,yEAAyE;IACzE,oDAAoD;IACpD,yDAAyD;IACzD,sDAAsD;IACtD,gDAAgD;IAChD,EAAE;IACF,2DAA2D;IAC3D,0DAA0D;IAC1D,oEAAoE;IACpE,4CAA4C;IAC5C,mEAAmE;IACnE,0CAA0C;IAC1C,2DAA2D;IAC3D,gEAAgE;IAChE,iCAAiC;IACjC,sDAAsD;IACtD,gDAAgD;IAChD,MAAM,2BAA2B,GAAG,8BAA8B,EAAE,CAAC;IAErE,MAAM,CAAC,wBAAwB,EAAE,2BAA2B,CAAC,GAAG,QAAQ;IAGtE,yEAAyE;IACzE,sEAAsE;IACtE,wEAAwE;IACxE,iCAAiC;IACjC,2BAA2B,EAAE,IAAI,2BAA2B,CAC7D,CAAC;IAEF,yEAAyE;IACzE,eAAe,CAAC,GAAG,EAAE;QACnB,MAAM,YAAY,GAAG,yBAAyB,CAAC,QAAQ,CAAC,EAAE;YACxD,2BAA2B,CAAC,QAAQ,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QACH,OAAO,GAAG,EAAE;YACV,YAAY,CAAC,MAAM,EAAE,CAAC;QACxB,CAAC,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,kDAAkD;IAClD,0DAA0D;IAC1D,4CAA4C;IAC5C,iDAAiD;IACjD,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,wBAAwB,KAAK,SAAS,EAAE;YAC1C,2BAA2B,CAAC,2BAA2B,CAAC,CAAC;SAC1D;IACH,CAAC,EAAE,CAAC,wBAAwB,EAAE,2BAA2B,CAAC,CAAC,CAAC;IAE5D,OAAO,wBAAwB,CAAC;AAClC,CAAC","sourcesContent":["import { useEffect, useLayoutEffect, useState } from 'react';\n\nimport { NotificationResponse } from './Notifications.types';\nimport {\n  addListener as addSharedResponseListener,\n  getLastNotificationResponse,\n} from './SharedNotificationResponseListener.fx';\nimport useInitialNotificationResponse from './useInitialNotificationResponse';\n\n/**\n * Return value of this hook may be one of three types:\n * - `undefined` if the hook is rendered so early during\n *   the start of the app that we don't know yet\n *   whether there has been any notification response.\n * - `null` until the app receives any notification response\n * - an object of `NotificationResponse` type - the response\n *   that has been received by the app most recently.\n */\nexport default function useLastNotificationResponse() {\n  // When considering how to implement this hook we need to think\n  // about three moments of mounting the hook (after mounting\n  // the shared response subscription will take care of updating the value):\n  // 1. At the immediate start of the app, before initial notification\n  //    response information is defined in JS (before the moment we believe\n  //    is the last moment that the initial notification response could\n  //    be delivered).\n  // 2. After that (while the app is running).\n  //\n  // In the first situation the return value should go like:\n  //     undefined -> null | NotificationResponse\n  // - we ensure we start off with `undefined` thanks to\n  //   `getLastNotificationResponse() ?? initialNotificationResponse`\n  //   which will evaluate to `undefined ?? undefined`\n  // - we ensure that if no initial notification response will be delivered\n  //   (useInitialNotificationResponse() returns null)\n  //   we update our value to null too (see last useEffect)\n  // - we ensure we catch any future responses by adding\n  //   a shared response listener (useLayout hook)\n  //\n  // In the second situation the return value should go like:\n  //     null | NotificationResponse -> NotificationResponse\n  // - we ensure we start off with `null` (if no notification response\n  //   has occured) thanks to initial value of\n  //   `getLastNotificationResponse() ?? initialNotificationResponse`\n  //   which evalutes to `undefined ?? null`\n  // - we ensure we start off with last notification response\n  //   thanks to `getLastNotificationResponse()` which will return\n  //   latest notification response\n  // - we ensure we catch any future responses by adding\n  //   a shared response listener (useLayout hook)\n  const initialNotificationResponse = useInitialNotificationResponse();\n\n  const [lastNotificationResponse, setLastNotificationResponse] = useState<\n    NotificationResponse | null | undefined\n  >(\n    // getLastNotificationResponse() is only NotificationResponse | undefined\n    // while initialNotificationResponse can be null, meaning there was no\n    // initial notification response. By using ?? here we ensure we fallback\n    // to a more defined, null value.\n    getLastNotificationResponse() ?? initialNotificationResponse\n  );\n\n  // useLayoutEffect ensures the listener is registered as soon as possible\n  useLayoutEffect(() => {\n    const subscription = addSharedResponseListener(response => {\n      setLastNotificationResponse(response);\n    });\n    return () => {\n      subscription.remove();\n    };\n  }, []);\n\n  // If this hook is mounted very early, i.e. before\n  // useInitialNotificationResponse returns a defined value,\n  // lastNotificationResponse is undefined and\n  // we want to update its value as soon as we can.\n  useEffect(() => {\n    if (lastNotificationResponse === undefined) {\n      setLastNotificationResponse(initialNotificationResponse);\n    }\n  }, [lastNotificationResponse, initialNotificationResponse]);\n\n  return lastNotificationResponse;\n}\n"]}