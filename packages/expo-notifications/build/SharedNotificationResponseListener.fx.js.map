{"version":3,"file":"SharedNotificationResponseListener.fx.js","sourceRoot":"","sources":["../src/SharedNotificationResponseListener.fx.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,uCAAuC,EAAE,MAAM,wBAAwB,CAAC;AAEjF,uCAAuC;AACvC,sBAAsB;AACtB,IAAI,wBAAwB,GAAqC,SAAS,CAAC;AAE3E,+CAA+C;AAC/C,uCAAuC,CAAC,QAAQ,CAAC,EAAE;IACjD,0CAA0C;IAC1C,wBAAwB,GAAG,QAAQ,CAAC;AACtC,CAAC,CAAC,CAAC;AAEH;;;GAGG;AACH,MAAM,UAAU,2BAA2B;IACzC,OAAO,wBAAwB,CAAC;AAClC,CAAC","sourcesContent":["import { NotificationResponse } from './Notifications.types';\nimport { addNotificationResponseReceivedListener } from './NotificationsEmitter';\n\n// Last notification response caught by\n// global subscription\nlet lastNotificationResponse: NotificationResponse | undefined = undefined;\n\n// An ever-running subscription, never cleared.\naddNotificationResponseReceivedListener(response => {\n  // Prepare initial value for new listeners\n  lastNotificationResponse = response;\n});\n\n/**\n * Return a notification response most recently\n * caught by the ever-running shared response listener\n */\nexport function getLastNotificationResponse() {\n  return lastNotificationResponse;\n}\n"]}