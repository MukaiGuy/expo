{"version":3,"file":"SharedNotificationResponseListener.fx.js","sourceRoot":"","sources":["../src/SharedNotificationResponseListener.fx.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,kBAAkB,CAAC;AAGhD,OAAO,EAAE,uCAAuC,EAAE,MAAM,wBAAwB,CAAC;AAEjF,6CAA6C;AAC7C,kCAAkC;AAClC,MAAM,gBAAgB,GAAG;IACvB,WAAW,EAAE,GAAG,EAAE,GAAE,CAAC;IACrB,eAAe,EAAE,GAAG,EAAE,GAAE,CAAC;CAC1B,CAAC;AAEF,4CAA4C;AAC5C,gDAAgD;AAChD,yCAAyC;AACzC,MAAM,YAAY,GAAG,IAAI,YAAY,CAAC,gBAAgB,CAAC,CAAC;AACxD,MAAM,mBAAmB,GAAG,UAAU,CAAC;AAEvC,uCAAuC;AACvC,sBAAsB;AACtB,IAAI,wBAAwB,GAAqC,SAAS,CAAC;AAE3E,+CAA+C;AAC/C,uCAAuC,CAAC,QAAQ,CAAC,EAAE;IACjD,0CAA0C;IAC1C,wBAAwB,GAAG,QAAQ,CAAC;IACpC,2CAA2C;IAC3C,YAAY,CAAC,IAAI,CAAC,mBAAmB,EAAE,QAAQ,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC;AAEH;;;GAGG;AACH,MAAM,UAAU,WAAW,CAAC,QAAkD;IAC5E,OAAO,YAAY,CAAC,WAAW,CAAC,mBAAmB,EAAE,QAAQ,CAAC,CAAC;AACjE,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,2BAA2B;IACzC,OAAO,wBAAwB,CAAC;AAClC,CAAC","sourcesContent":["import { EventEmitter } from '@unimodules/core';\n\nimport { NotificationResponse } from './Notifications.types';\nimport { addNotificationResponseReceivedListener } from './NotificationsEmitter';\n\n// We need any native module for EventEmitter\n// to be able to be subscribed to.\nconst MockNativeModule = {\n  addListener: () => {},\n  removeListeners: () => {},\n};\n\n// Event emitter used solely for the purpose\n// of distributing initial notification response\n// to useInitialNotificationResponse hook\nconst eventEmitter = new EventEmitter(MockNativeModule);\nconst RESPONSE_EVENT_TYPE = 'response';\n\n// Last notification response caught by\n// global subscription\nlet lastNotificationResponse: NotificationResponse | undefined = undefined;\n\n// An ever-running subscription, never cleared.\naddNotificationResponseReceivedListener(response => {\n  // Prepare initial value for new listeners\n  lastNotificationResponse = response;\n  // Inform existing listeners of a new value\n  eventEmitter.emit(RESPONSE_EVENT_TYPE, response);\n});\n\n/**\n * Add listener to the ever-running shared response listener\n * @param listener Notification response listener\n */\nexport function addListener(listener: (response: NotificationResponse) => void) {\n  return eventEmitter.addListener(RESPONSE_EVENT_TYPE, listener);\n}\n\n/**\n * Return a notification response most recently\n * caught by the ever-running shared response listener\n */\nexport function getLastNotificationResponse() {\n  return lastNotificationResponse;\n}\n"]}